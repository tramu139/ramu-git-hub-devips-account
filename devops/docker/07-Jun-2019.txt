Usecase:
Implement master/slave architecture of jenkins  using docker


$ sudo su -
Lets delete all the container

# docker rm  -f $(docker ps -aq)
# docker container ls     ( we have no containers )

To start jenkins as container
# docker run --name  master -d  -p 8080:8080  jenkins

To check jenkins ( public_ip:8080 )

18.136.211.65:8080

To capture ip_address of jenkins
# docker inspect master  ( we can see the below output )
IPAddress": "172.17.0.2

To create slave machine ( Ubuntu os as container)
# docker run  --name slave  -it  --link  master:jenkins ubuntu

We need to download  slave.jar  from master machine
/ #  wget http://172.17.0.2:8080/jnlpJars/slave.jar  
( command not found )

So, install wget ( update apt repository and install the package )
/ # apt-get  update
/ # apt-get install -y wget

Now, lets download the slave.jar
/ #  wget http://172.17.0.2:8080/jnlpJars/slave.jar  
/ #  ls

+++++++++++++++++++++++++++++


Creating testing environment using docker



Create selenium hub container, and link it with two node containers.
One node with firefox installed, another node with chrome installed.

Tester should be able to run selenuim automation programs for testing the application on multiple browsers.


To delete all the running containers
# docker rm -f $(docker ps -aq) 

In Browser  --  open - hub.docker.com

Search for selenium
We have a image -  selenium/hub

To start selenium/hub as container
# docker run --name  hub  -d -p 4444:4444   selenium/hub

In hub.docker.com
we also have-  selenium/node-chrome-debug    ( It is ubuntu container with chrome)

To start it as a container and link to hub ( previous container)
# docker run --name chrome  -d -p 5901:5900  --link hub:selenium   selenium/node-chrome-debug

In hub.docker.com
we also have-  selenium/node-firefox-debug

To start it as a container and link to hub ( It is ubuntu container with firefox)
# docker run --name firefox  -d -p 5902:5900  --link hub:selenium   selenium/node-firefox-debug

To see the list of container
# docker container ls

Note: firefox and chrome containers are GUI containers.
To see the GUI interface to chrome / firefox container
-------------------------------------------------
Download and install vnc viewer
In VNC viewer search bar
public_ip_dockerhost:5901

18.136.211.65:5901
Password - secret

++++++++++++++++++++++++++++++++++++++++++++++++++++++




All the commands we learnt till date are adhoc commands.

In the previous usecase we have installed two containers ( chrome and firefox)
Lets say you need 800 containers?
Do we need to run 800 commands?
 
Instead of 800 commands, we can use docker compose

++++++++++++++++++++++++++++++++++



Docker compose
This is a feature of docker using which we can create multicontainer architecture using yaml files. This yaml file contains information about the  containers that we want to launch and how they have to be linked with each other.

Yaml is a file format. It is not a scripting language.
Yaml will store the data in key value pairs
Lefthand side - Key
Righthand side - Value
Yaml file is space indented.




Sample Yaml file

---
durgasoft:
 trainers:
  sunil: Devops
  raj: Python
 Coordinators:
  lakshmi: Devops
  rani: AWS
...


++++++++++++++++++++++
durgasoft -- root  element
+++++++++++++++++++++++++

To validate the abvove Yaml file
Open  http://www.yamllint.com/
Paste the above code  -- Go button

++++++++++++++++++++++++++

Installing Docker compose
-----------------------
1) Open https://docs.docker.com/compose/install/
2) Go to linux section
   Copy and pase the below two commands

#    sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

# sudo chmod +x /usr/local/bin/docker-compose
	
How to check docker compose is installed or not?

# docker-compose  --version

+++++++++++++++++++++++++



Create a docker compose file for setting up dev environment
where mysql container is linked with wordpress container.

# vim docker-compose.yml       ( Name of the file should be docker-compose.yml)
---
version: '3'

services:
 mydb:
  image: mysql:5
  environment:
   MYSQL_ROOT_PASSWORD: intelliq

 mysite:
  image: wordpress
  ports:
   - 5050:80
  links:
   - mydb:mysql
...


:wq

Lets remove all the running container
# docker rm -f $(docker ps -aq)

How to start the above services from dockerfile
# docker-compose up

We got lot of logs coming on the screen. to avoid it we use -d  option  

# docker-compose stop

Remove the container
# docker rm -f $(docker ps -aq)
 
# docker-compose up -d

To check wordpress
public_ip:5050

++++++++++++++++++++++++++++
To stop both the containers
# docker-compose stop

++++++++++++++++++++++++++++++
