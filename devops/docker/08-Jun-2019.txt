

Sample Yaml file

---
durgasoft:
 trainers:
  sunil: Devops
  raj: Python
 Coordinators:
  lakshmi: Devops
  rani: AWS
...


++++++++++++++++++++++
durgasoft -- root  element
+++++++++++++++++++++++++

To validate the abvove Yaml file
Open  http://www.yamllint.com/
Paste the above code  -- Go button

++++++++++++++++++++++++++

Installing Docker compose
-----------------------
1) Open https://docs.docker.com/compose/install/
2) Go to linux section
   Copy and pase the below two commands

#    sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

# sudo chmod +x /usr/local/bin/docker-compose
	
How to check docker compose is installed or not?

# docker-compose  --version

+++++++++++++++++++++++++



Create a docker compose file for setting up dev environment.
mysql container is linked with wordpress container.




# vim docker-compose.yml      ( Name of the file should be docker-compose.yml)

---
version: '3'

services:
 mydb:
  image: mysql:5
  environment:
   MYSQL_ROOT_PASSWORD: durgasoft

 mysite:
  image: wordpress
  ports:
   - 5050:80
  links:
   - mydb:mysql
...

:wq

Lets remove all the running container
# docker rm -f $(docker ps -aq)

How to start the above services from dockerfile
# docker-compose  up

We got lot of logs coming on the screen. to avoid it we use -d  option  

# docker-compose stop

Remove the container
# docker rm -f $(docker ps -aq)
 
# docker-compose up  -d

To check wordpress
public_ip:5050

++++++++++++++++++++++++++++
To stop both the containers
# docker-compose   stop

++++++++++++++++++++++++++++++


Create a docker container file for setting up LAMP architecture 



# vim docker-compose.yml

---
version: '3'

services:
 mydb:
  image: mysql:5
  environment:
   MYSQL_ROOT_PASSWORD: durgasoft

 apache:
  image: tomcat
  ports:
   - 6060:8080
  links:
   - mydb:mysql


 php:
  image: php
  links:
   - mydb:mysql
   - apache:tomcat
...


:wq

# docker-compose up -d

To see the list of the containers
# docker container ls
( Observation - we are unable to see the php container)

# docker ps -a

++++++++++++++++++++++++++++++++++++
Ex: Docker-compose file for setting up CI-CD Environment.
jenkins container is linked with two tomcat containers 


# vim docker-compose.yml

---
version: '3'
services:
 devserver:
  image: jenkins
  ports:
   - 7070:8080

 qaserver:
  image: tomcat
  ports:
   - 8899:8080
  links:
   - devserver:jenkins


 prodserver:
  image: tomcat
  ports:
   - 9090:8080
  links:
   - devserver:jenkins
...


:wq

# docker rm -f $(docker ps -aq)
# docker-compose up -d

# docker container ls

To check
public_ip:7070  ( To check jenkins )
public_ip:8899 ( Tomcat  qa server )
public_ip:9090 ( Tomcat  dev server )

+++++++++++++++++++++


Docker-compose file to set up testing environment.
selenium  hub container is linked with two node containers.



# vim docker-compose.yml

---
version: '3'
services:
 hub:
  image: selenium/hub
  ports:
   - 4444:4444

 chrome:
  image: selenium/node-chrome-debug
  ports:
   - 5901:5900
  links:
   - hub:selenium

 firefox:
  image: selenium/node-firefox-debug
  ports:
   - 5902:5900
  links:
   - hub:selenium
...

:wq

Lets delete all the running containers

# docker rm -f $(docker ps -aq)
# docker-compose up -d

# docker container ls

As it is GUI container, 
we can access using VNC viewer

Open VNC viewer
52.77.219.115:5901
password: secret


++++++++++++++++++++++++++++++++++++++++++++++

Docker volumes
------------------
Docker containers are  ephemeral ( temporary )
Where as the data processed by the container should be permanent.

Generally, when a container is deleted all its data will be lost.
To preserve the data, even after deleting the container, we use volumes.

Volumes are of two types
1) Simple docker volumes
2) Docker volume containers


Simple docker volumes
-----------------------------
These volumes are used only when we want to access the data, 
even after the container is deleted. 
But this data cannot be shared with other containers.



usecase
------------
1) Create a directory called /data ,  
start centos as container and mount /data as volume. 
Create files in mounted volume in centos container,
exit from the container and delete the container. Check if the files are still available.




Lets create a folder  with the name  
# mkdir  /data

# docker run --name c1 -it -v /data centos  ( v option is used to attach volume)

# ls  ( Now, we can see the data folder also in the container)

# cd data
# touch file1   file2 
# ls
# exit  ( To come out of the container )
# docker inspect c1

We can see under mounts "data" folder it located in the host machine.
Copy the path


/var/lib/docker/volumes/c5c85f87fdc3b46b57bb15f2473786fe7d49250227d1e9dc537bc594db001fc6/_data

Now, lets delete te container
# docker rm -f c1

After deleting the container, lets go to the location of the data folder

# cd /var/lib/docker/volumes/d867766f70722eaf8cba651bc1d64c60e9f49c5b1f1ebb9e781260f777f3c7e8/_data

# ls  ( we can see file1  file2 )

( Observe , the container is deleted but still  the data is persistant )
