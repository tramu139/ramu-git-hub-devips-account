Master - Slave configuration
------------------------------------

Same version of java should exist.
Master and slave should have password less SSH

Step 1: Create slave machine  , connect to slave

1) Update the apt repository
sudo apt-get update

2) To install Oracle PPA Repository
sudo add-apt-repository ppa:linuxuprising/java

3) Again Update the apt repository 
sudo apt-get update

4) Install Oracle JDK 8
sudo apt install oracle-java11-installer


Command to make Java11 as default java version on Ubuntu
sudo apt install oracle-java11-set-default

5) Check the Java Version
java --version

------------------

Connect to slave
7) Check you user
$ whoami       (  ubuntu )

8) set password  for  ubuntu  user
syntax: sudo  passed  <user_name>
Ex:        sudo passwd ubuntu
enter password


$  cd /etc/ssh

$ ls   ( we get list of files )   Look for   sshd_config

To edit sshd_config
$ sudo vim sshd_config

Go to insert mode

) change password authentication to yes

13) Save and quit :wq

14) Restart the service
$ sudo service ssh restart

Lets test the connection
-------------------------------

15) Connect to the development server  ( Master )

16) connect to slave server through dev server
ssh ubuntu@private_ip_slave_machine

$ ssh ubuntu@172.31.35.155


exit  ( to come back to master )

+++++++++++++++++++++++++++++++++++++++


17)  To connect to slave  without password
$ ssh-keygen      ( In master)

$ cd .ssh

ls 

id_rsa is known as private key

id_rsa.pub is known as public key


18) copy the keys to slave server
ssh-copy-id  ubuntu@private_ip_slave_server
ssh-copy-id  ubuntu@172.31.35.155



19) now we are able to connect to the slave user without password
$ ssh ubuntu@172.31.35.155

-------------------

Download slave.jar in slave machine


 wget http://private_ip_of_master:8080/jnlpJars/slave.jar
wget http://172.31.27.59:8080/jnlpJars/slave.jar


Check the file is download or not
$ ls

check the file permissions
$ ls -l

we want    rwxrw-r--

3) Give execute permissions of this file
chmod u+x slave.jar


4) Create an empty folder which will work like workspace for jenkins to use on the slave machine
$ mkdir workspace
$ cd workspace
$ pwd         ( note the path of the workspace )--    /home/ubuntu/workspace


++++++++++++++++++++++++++++

Creating node in Jenkins
---------------------------

 Open the dashboard of jenkins

manage jenkins --- manage nodes

7) Click on new node ----  node name -  Myslave
		       - select permanent agent


Lable - Slave_lab
Remote root directory   -/home/ubuntu/workspace

10) Go to Launch method
Select Launch agent via execution of command on the master

11) In Launch command
ssh ubuntu@private_ip_of_slave java -jar slave.jar
ssh ubuntu@172.31.35.155     java  -jar   slave.jar


13) Click on save

++++++++++++++++++++++++++++++
Configure job to run on slave
------------------------------

14) Select Testing Job

15) Go to Configure  --> General Tab

17) Check Restrict where this project can be run

18) Enter Label Expression ( Slave_lab)

Apply ---> Save  
Run the job, In console output, we can see the job is executed in slave machine
+++++++++++++++++++++++++++++++++++++






